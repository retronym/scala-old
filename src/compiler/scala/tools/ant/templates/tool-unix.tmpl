#!/bin/sh
#
##############################################################################
# Copyright 2002-2009, LAMP/EPFL
#
# This is free software; see the distribution for copying conditions.
# There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.
##############################################################################

cygwin=false;
case "`uname`" in
    CYGWIN*) cygwin=true ;;
esac

# Finding the root folder for this Scala distribution
SOURCE=$0;
SCRIPT=`basename "$SOURCE"`;
while [ -h "$SOURCE" ]; do
    SCRIPT=`basename "$SOURCE"`;
    LOOKUP=`ls -ld "$SOURCE"`;
    TARGET=`expr "$LOOKUP" : '.*-> \(.*\)$'`;
    if expr "${TARGET:-.}/" : '/.*/$' > /dev/null; then
        SOURCE=${TARGET:-.};
    else
        SOURCE=`dirname "$SOURCE"`/${TARGET:-.};
    fi;
done;

# see #2092
SCALA_HOME=`dirname "$SOURCE"`
SCALA_HOME=`cd "$SCALA_HOME"; pwd -P`
SCALA_HOME=`cd "$SCALA_HOME"/..; pwd`

# Remove spaces from SCALA_HOME on windows
if $cygwin; then
    SCALA_HOME=`cygpath --windows --short-name "$SCALA_HOME"`
    SCALA_HOME=`cygpath --unix "$SCALA_HOME"`
fi

# Constructing the extension classpath
TOOL_CLASSPATH="@classpath@"
if [ -z "$TOOL_CLASSPATH" ] ; then
    for ext in "$SCALA_HOME"/lib/* ; do
        if [ -z "$TOOL_CLASSPATH" ] ; then
            TOOL_CLASSPATH="$ext"
        else
            TOOL_CLASSPATH="$TOOL_CLASSPATH:$ext"
        fi
    done
fi

EXEC=exec
CYGWIN_TERM_PRE=
CYGWIN_TERM_POST=
CYGWIN_JLINE_TERMINAL=
if $cygwin; then
    if [ "$OS" = "Windows_NT" ] && cygpath -m .>/dev/null 2>/dev/null ; then
        format=mixed
    else
        format=windows
    fi
    SCALA_HOME=`cygpath --$format "$SCALA_HOME"`
    TOOL_CLASSPATH=`cygpath --path --$format "$TOOL_CLASSPATH"`
    case "$TERM" in
        rxvt* | xterm*)
            EXEC=
            CYGWIN_TERM_PRE="stty -icanon min 1 -echo"
            CYGWIN_TERM_POST="stty icanon echo"
            CYGWIN_JLINE_TERMINAL=-Djline.terminal=jline.UnixTerminal
            trap "$CYGWIN_TERM_POST" SIGINT
        ;;
    esac
fi


# Reminder: substitution ${JAVA_OPTS:=-Xmx256M -Xms16M} DO NOT work on Solaris
[ -n "$JAVA_OPTS" ] || JAVA_OPTS="@javaflags@"

# Iterate over command line arguments looking for -D and -J args,
# both of which we pass to the underlying JVM instead of to scala.
# (In the case of -J we strip the -J first.)
# Example usage: scala -J-Xmx1024M -Dfoo.bar=123
#
while [ $# -ne 0 ]
do
  param=$1;
  case "$param" in
    -J*)
      val=${param:2}
      JAVA_OPTS="$JAVA_OPTS $val" ;;
    -D*)
      JAVA_OPTS="$JAVA_OPTS $param" ;;
    *)
      if [ -z "$SCALA_ARGS" ]; then
        SCALA_ARGS=("$param")
      else
        SCALA_ARGS=("${SCALA_ARGS[@@]}" "$param")
      fi
  esac
  shift;
done

if [ -z "$JAVACMD" -a -n "$JAVA_HOME" -a -x "$JAVA_HOME/bin/java" ]; then
    JAVACMD="$JAVA_HOME/bin/java"
fi

eval $CYGWIN_TERM_PRE
$EXEC "${JAVACMD:=java}" $JAVA_OPTS -cp "$TOOL_CLASSPATH" -Dscala.home="$SCALA_HOME" -Denv.classpath="$CLASSPATH" -Denv.emacs="$EMACS" $CYGWIN_JLINE_TERMINAL @properties@ @class@ @toolflags@ "${SCALA_ARGS[@@]}"
eval $CYGWIN_TERM_POST
